// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using gos;

#nullable disable

namespace gos.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250529062740_AddDeadlineDaysToRule")]
    partial class AddDeadlineDaysToRule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("gos.models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("closure_date");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("applications_pkey");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("gos.models.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("parameters_pkey");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("parameters", (string)null);
                });

            modelBuilder.Entity("gos.models.ParameterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("parameter_types_pkey");

                    b.ToTable("parameter_types", (string)null);
                });

            modelBuilder.Entity("gos.models.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComparisonOperator")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comparison_operator");

                    b.Property<int?>("DeadlineDays")
                        .HasColumnType("integer")
                        .HasColumnName("deadline_days");

                    b.Property<int>("NeededTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("needed_type_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("rules_pkey");

                    b.HasIndex("NeededTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("rules", (string)null);
                });

            modelBuilder.Entity("gos.models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ActivationDate")
                        .HasColumnType("date")
                        .HasColumnName("activation_date");

                    b.Property<DateOnly?>("DeactivationDate")
                        .HasColumnType("date")
                        .HasColumnName("deactivation_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("services_pkey");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("gos.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Login" }, "users_login_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("gos.models.Application", b =>
                {
                    b.HasOne("gos.models.Service", "Service")
                        .WithMany("Applications")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("applications_service_id_fkey");

                    b.HasOne("gos.models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("applications_user_id_fkey");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gos.models.Parameter", b =>
                {
                    b.HasOne("gos.models.ParameterType", "Type")
                        .WithMany("Parameters")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("parameters_type_id_fkey");

                    b.HasOne("gos.models.User", "User")
                        .WithMany("Parameters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("parameters_user_id_fkey");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gos.models.Rule", b =>
                {
                    b.HasOne("gos.models.ParameterType", "NeededType")
                        .WithMany("Rules")
                        .HasForeignKey("NeededTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rules_needed_type_id_fkey");

                    b.HasOne("gos.models.Service", "Service")
                        .WithMany("Rules")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rules_service_id_fkey");

                    b.Navigation("NeededType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("gos.models.ParameterType", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("gos.models.Service", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("gos.models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
